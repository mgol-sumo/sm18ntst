{"version":3,"sources":["App.tsx","index.tsx","utils.tsx"],"names":["enablePhraseInContextEditor","script","document","createElement","textContent","body","appendChild","App","numberOfQueries","setNumberOfQueries","useState","numberOfCars","setNumberOfCars","className","URLSearchParams","window","location","search","has","onClick","type","value","onChange","ev","parseInt","currentTarget","id","values","count","b","param","numberOfKeys","joinedKeys","genderOfUser","ReactDOM","render","StrictMode","locale","messages","flattenMessages","nestedMessages","prefix","phraseMode","Object","keys","reduce","key","prefixedKey","assign","replace","create","icpOrigEnI18n","icpIcuEnI18n","traceDetailsOrigEnI18n","traceDetailsIcuEnI18n","exampleEnI18n","getElementById"],"mappings":"g/HAIA,MAAMA,EAA8B,KAClC,MAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,YAAe,mfAqBtBF,SAASG,KAAKC,YAAYL,IAkHbM,MA/Gf,WACE,MAAOC,EAAiBC,GAAsBC,mBAAS,IAChDC,EAAcC,GAAmBF,mBAAS,GAEjD,OACE,sBAAKG,UAAU,MAAf,UACG,IAAIC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,eAC/C,wBAAQC,QAASnB,EAAjB,6CAFJ,oBAOE,+BACE,uCACQ,IACN,uBACEoB,KAAK,SACLC,MAAOV,EACPW,SAAWC,GAAOX,EAAgBY,SAASD,EAAGE,cAAcJ,aAGhE,6BACE,cAAC,IAAD,CACEK,GAAI,+BACJC,OAAQ,CAAEhB,oBAGd,6BACE,cAAC,IAAD,CACEe,GAAI,+BACJC,OAAQ,CAAEhB,oBAGd,6BACE,cAAC,IAAD,CACEe,GAAI,+BACJC,OAAQ,CAAEhB,oBAGd,6BACE,cAAC,IAAD,CACEe,GAAI,+BACJC,OAAQ,CAAEhB,oBAGd,6BACE,cAAC,IAAD,CACEe,GAAI,mDACJC,OAAQ,OAGZ,6BACE,cAAC,IAAD,CACED,GAAI,uDAGR,6BACE,cAAC,IAAD,CACEA,GACE,wEAEFC,OAAQ,CAAEC,MAAO,GAAIC,EAAIC,GAAoB,4BAAIA,SAGrD,6BACE,cAAC,IAAD,CACEJ,GAAI,uDACJC,OAAQ,CAAEC,MAAO,OAGrB,6BACE,cAAC,IAAD,CACEF,GACE,iEAEFC,OAAQ,CAAEI,aAAc,EAAGC,WAAY,kBAG3C,0CACW,IACT,uBACEZ,KAAK,SACLC,MAAOb,EACPc,SAAWC,GACTd,EAAmBe,SAASD,EAAGE,cAAcJ,aAInD,6BACE,cAAC,IAAD,CACEK,GAAI,gCACJC,OAAQ,CAAEnB,uBAGd,6BACE,cAAC,IAAD,CACEkB,GAAI,yCACJC,OAAQ,CAAEM,aAAc,cAG5B,6BACE,cAAC,IAAD,CACEP,GAAI,wCACJC,OAAQ,CAAEM,aAAc,qB,wCCzHpCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CACEC,OAAQ,KACRC,SCbC,SAASC,EACdC,EACAC,EAAS,GACTC,GAAa,GAEb,OAAuB,OAAnBF,EACK,GAEFG,OAAOC,KAAKJ,GAAgBK,QAAO,CAACP,EAAUQ,KACnD,MAAMzB,EAAQmB,EAAeM,GACvBC,EAAcN,EAAU,GAAEA,KAAUK,IAAQA,EAYlD,MAVqB,kBAAVzB,EACTsB,OAAOK,OAAOV,EAAU,CACtB,CAACS,GAAcL,EACV,gBAAeK,EAAYE,QAAQ,WAAY,UAChD5B,IAGNsB,OAAOK,OAAOV,EAAUC,EAAgBlB,EAAO0B,EAAaL,IAGvDJ,IACNK,OAAOO,OAAO,ODVHX,CACR,CACEY,gBACAC,eACAC,yBACAC,wBACAC,iBAEF,GACA,IAAIzC,gBAAgBC,OAAOC,SAASC,QAAQC,IAAI,eAXpD,SAcE,cAAC,EAAD,QAGJhB,SAASsD,eAAe,W","file":"static/js/main.0a3c57ec.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport './App.css';\n\nconst enablePhraseInContextEditor = () => {\n  const script = document.createElement('script');\n  script.textContent = `\nwindow.PHRASEAPP_CONFIG = {\n  projectId: '0ae1bae95e54c0c6e1cf0ab19af0ad68',\n  autoLowercase: false,\n};\n\n(function () {\n  var phraseapp = document.createElement('script');\n  phraseapp.type = 'text/javascript';\n  phraseapp.async = true;\n\n  phraseapp.src = [\n    'https://',\n    'phraseapp.com/assets/in-context-editor/2.0/app.js?',\n    new Date().getTime(),\n  ].join('');\n\n  var s = document.getElementsByTagName('script')[0];\n  s.parentNode.insertBefore(phraseapp, s);\n})();\n`;\n  document.body.appendChild(script);\n};\n\nfunction App() {\n  const [numberOfQueries, setNumberOfQueries] = useState(0);\n  const [numberOfCars, setNumberOfCars] = useState(0);\n\n  return (\n    <div className=\"App\">\n      {new URLSearchParams(window.location.search).has('phraseMode') && (\n        <button onClick={enablePhraseInContextEditor}>\n          Enable Phrase in-context editor\n        </button>\n      )}\n      Example messages:\n      <ul>\n        <li>\n          Cars:{' '}\n          <input\n            type=\"number\"\n            value={numberOfCars}\n            onChange={(ev) => setNumberOfCars(parseInt(ev.currentTarget.value))}\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={'exampleEnI18n.carsAvailable1'}\n            values={{ numberOfCars }}\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={'exampleEnI18n.carsAvailable2'}\n            values={{ numberOfCars }}\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={'exampleEnI18n.carsAvailable3'}\n            values={{ numberOfCars }}\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={'exampleEnI18n.carsAvailable4'}\n            values={{ numberOfCars }}\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={'traceDetailsIcuEnI18n.servicesContribution.title'}\n            values={{}}\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={'traceDetailsIcuEnI18n.servicesContribution.title'}\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={\n              'traceDetailsIcuEnI18n.spansFiltering.spansNumberForTagNameAggregation'\n            }\n            values={{ count: 42, b: (param: 'string') => <b>{param}</b> }}\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={'icpIcuEnI18n.signals.dimensionalExplanations.getKeys'}\n            values={{ count: 6 }}\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={\n              'icpIcuEnI18n.signals.dimensionalExplanations.getSummaryTweaked'\n            }\n            values={{ numberOfKeys: 3, joinedKeys: 'a, b and c' }}\n          />\n        </li>\n        <li>\n          Queries:{' '}\n          <input\n            type=\"number\"\n            value={numberOfQueries}\n            onChange={(ev) =>\n              setNumberOfQueries(parseInt(ev.currentTarget.value))\n            }\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={'exampleEnI18n.matchingQueries'}\n            values={{ numberOfQueries }}\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={'exampleEnI18n.userFoundMatchingQueries'}\n            values={{ genderOfUser: 'female' }}\n          />\n        </li>\n        <li>\n          <FormattedMessage\n            id={'exampleEnI18n.userFoundAMatchingQuery'}\n            values={{ genderOfUser: 'female' }}\n          />\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { IntlProvider } from 'react-intl';\nimport './index.css';\nimport App from './App';\nimport icpOrigEnI18n from './i18n/icp.orig.en.i18n.json';\nimport icpIcuEnI18n from './i18n/icp.icu.en.i18n.json';\nimport traceDetailsOrigEnI18n from './i18n/traceDetails.orig.en.i18n.json';\nimport traceDetailsIcuEnI18n from './i18n/traceDetails.icu.en.i18n.json';\nimport exampleEnI18n from './i18n/example1.en.i18n.json';\nimport { flattenMessages } from './utils';\n\nReactDOM.render(\n  <React.StrictMode>\n    <IntlProvider\n      locale={'en'}\n      messages={flattenMessages(\n        {\n          icpOrigEnI18n,\n          icpIcuEnI18n,\n          traceDetailsOrigEnI18n,\n          traceDetailsIcuEnI18n,\n          exampleEnI18n,\n        },\n        '',\n        new URLSearchParams(window.location.search).has('phraseMode'),\n      )}\n    >\n      <App />\n    </IntlProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// react-intl V2+ doesn't support nested objects\n// So we need to flatten the messages object before using in the code\n// source: https://formatjs.io/docs/react-intl/upgrade-guide-2x/#flatten-messages-object\nexport function flattenMessages(\n  nestedMessages: Record<string, any>,\n  prefix = '',\n  phraseMode = false,\n) {\n  if (nestedMessages === null) {\n    return {};\n  }\n  return Object.keys(nestedMessages).reduce((messages, key) => {\n    const value = nestedMessages[key];\n    const prefixedKey = prefix ? `${prefix}.${key}` : key;\n\n    if (typeof value === 'string') {\n      Object.assign(messages, {\n        [prefixedKey]: phraseMode\n          ? `'{{'__phrase_${prefixedKey.replace(/^[^.]+\\./, '')}__}}`\n          : value,\n      });\n    } else {\n      Object.assign(messages, flattenMessages(value, prefixedKey, phraseMode));\n    }\n\n    return messages;\n  }, Object.create(null));\n}\n"],"sourceRoot":""}